/**
 * Polygon Clipping Demo Using Line Clipping
 * 
 * This program demonstrates polygon clipping using the line clipping approach
 * and displays both the original and clipped polygons in separate viewports.
 * 
 * Controls:
 * - Left mouse button: Add a new polygon vertex
 * - Right mouse button: Finalize the polygon
 * - 'c' key: Toggle clipping
 * - 'r' key: Reset the polygon
 * - ESC: Exit the program
 */

#include <GL/glut.h>
#include <vector>
#include <iostream>
#include <cmath>

// Structure to represent a 2D point
struct Point {
    float x, y;
    
    Point(float _x = 0.0f, float _y = 0.0f) : x(_x), y(_y) {}
};

// Structure to represent a viewport
struct Viewport {
    int x, y, width, height;
    
    Viewport(int _x = 0, int _y = 0, int _w = 0, int _h = 0) 
        : x(_x), y(_y), width(_w), height(_h) {}
};

// Global variables
std::vector<Point> originalPolygon;
std::vector<Point> clippedPolygon;
bool clipPolygon = true;
int windowWidth = 800;
int windowHeight = 600;
float clipMinX = -0.5f, clipMaxX = 0.5f, clipMinY = -0.5f, clipMaxY = 0.5f;
Viewport leftViewport, rightViewport;

// Cohen-Sutherland region codes
const int INSIDE = 0; // 0000
const int LEFT = 1;   // 0001
const int RIGHT = 2;  // 0010
const int BOTTOM = 4; // 0100
const int TOP = 8;    // 1000

// Determine the region code for a point
int computeRegionCode(float x, float y) {
    int code = INSIDE;
    
    if (x < clipMinX)
        code |= LEFT;
    else if (x > clipMaxX)
        code |= RIGHT;
    
    if (y < clipMinY)
        code |= BOTTOM;
    else if (y > clipMaxY)
        code |= TOP;
    
    return code;
}

// Cohen-Sutherland line clipping algorithm
bool clipLine(Point& p1, Point& p2, Point& outP1, Point& outP2) {
    // Compute region codes for P1, P2
    int code1 = computeRegionCode(p1.x, p1.y);
    int code2 = computeRegionCode(p2.x, p2.y);
    bool accept = false;
    
    while (true) {
        // Both endpoints inside the clip rectangle
        if (!(code1 | code2)) {
            accept = true;
            break;
        }
        // Both endpoints outside the clip rectangle in the same region
        else if (code1 & code2) {
            break;
        }
        // Some part of the line might be inside
        else {
            // Pick an endpoint outside the clip rectangle
            int codeOut = code1 ? code1 : code2;
            float x, y;
            
            // Find intersection point
            if (codeOut & TOP) {
                // Point is above the clip rectangle
                x = p1.x + (p2.x - p1.x) * (clipMaxY - p1.y) / (p2.y - p1.y);
                y = clipMaxY;
            } else if (codeOut & BOTTOM) {
                // Point is below the clip rectangle
                x = p1.x + (p2.x - p1.x) * (clipMinY - p1.y) / (p2.y - p1.y);
                y = clipMinY;
            } else if (codeOut & RIGHT) {
                // Point is to the right of clip rectangle
                y = p1.y + (p2.y - p1.y) * (clipMaxX - p1.x) / (p2.x - p1.x);
                x = clipMaxX;
            } else if (codeOut & LEFT) {
                // Point is to the left of clip rectangle
                y = p1.y + (p2.y - p1.y) * (clipMinX - p1.x) / (p2.x - p1.x);
                x = clipMinX;
            }
            
            // Replace point outside clip rectangle
            if (codeOut == code1) {
                p1.x = x;
                p1.y = y;
                code1 = computeRegionCode(p1.x, p1.y);
            } else {
                p2.x = x;
                p2.y = y;
                code2 = computeRegionCode(p2.x, p2.y);
            }
        }
    }
    
    if (accept) {
        outP1 = p1;
        outP2 = p2;
    }
    
    return accept;
}

// Clip the polygon using the Sutherland-Hodgman algorithm
void clipPolygonSutherlandHodgman() {
    // Clear the clipped polygon
    clippedPolygon.clear();
    
    if (originalPolygon.size() < 3) {
        return;  // Not a polygon yet
    }
    
    // For each edge of the polygon, clip against each edge of the clip rectangle
    // We'll use the line clipping approach to clip each edge
    for (size_t i = 0; i < originalPolygon.size(); i++) {
        Point p1 = originalPolygon[i];
        Point p2 = originalPolygon[(i + 1) % originalPolygon.size()];
        
        Point outP1, outP2;
        if (clipLine(p1, p2, outP1, outP2)) {
            // Check if outP1 is already in the clipped polygon
            bool p1Found = false;
            for (const auto& p : clippedPolygon) {
                if (std::abs(p.x - outP1.x) < 0.0001f && std::abs(p.y - outP1.y) < 0.0001f) {
                    p1Found = true;
                    break;
                }
            }
            
            // Add outP1 if it's not already in the clipped polygon
            if (!p1Found) {
                clippedPolygon.push_back(outP1);
            }
            
            // Check if outP2 is already in the clipped polygon
            bool p2Found = false;
            for (const auto& p : clippedPolygon) {
                if (std::abs(p.x - outP2.x) < 0.0001f && std::abs(p.y - outP2.y) < 0.0001f) {
                    p2Found = true;
                    break;
                }
            }
            
            // Add outP2 if it's not already in the clipped polygon
            if (!p2Found) {
                clippedPolygon.push_back(outP2);
            }
        }
    }
}

// Initialize OpenGL settings
void init() {
    glClearColor(0.2f, 0.2f, 0.2f, 1.0f);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
    
    // Initialize viewports
    leftViewport = Viewport(0, 0, windowWidth / 2, windowHeight);
    rightViewport = Viewport(windowWidth / 2, 0, windowWidth / 2, windowHeight);
}

// Draw the clipping rectangle
void drawClippingRect() {
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_LINE_LOOP);
    glVertex2f(clipMinX, clipMinY);
    glVertex2f(clipMaxX, clipMinY);
    glVertex2f(clipMaxX, clipMaxY);
    glVertex2f(clipMinX, clipMaxY);
    glEnd();
}

// Draw a polygon from a vector of points
void drawPolygon(const std::vector<Point>& polygon, float r, float g, float b) {
    if (polygon.size() < 3) {
        return;  // Not a polygon yet
    }
    
    // Draw filled polygon with transparency
    glColor4f(r, g, b, 0.5f);
    glBegin(GL_POLYGON);
    for (const auto& p : polygon) {
        glVertex2f(p.x, p.y);
    }
    glEnd();
    
    // Draw polygon outline
    glColor3f(r, g, b);
    glBegin(GL_LINE_LOOP);
    for (const auto& p : polygon) {
        glVertex2f(p.x, p.y);
    }
    glEnd();
    
    // Draw polygon vertices
    glPointSize(5.0f);
    glBegin(GL_POINTS);
    for (const auto& p : polygon) {
        glVertex2f(p.x, p.y);
    }
    glEnd();
}

// Display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Apply clipping if enabled
    if (clipPolygon && originalPolygon.size() >= 3) {
        clipPolygonSutherlandHodgman();
    }
    
    // Left viewport - Original polygon
    glViewport(leftViewport.x, leftViewport.y, leftViewport.width, leftViewport.height);
    drawClippingRect();
    drawPolygon(originalPolygon, 0.2f, 0.6f, 1.0f);
    
    // Right viewport - Clipped polygon
    glViewport(rightViewport.x, rightViewport.y, rightViewport.width, rightViewport.height);
    drawClippingRect();
    if (clipPolygon) {
        drawPolygon(clippedPolygon, 1.0f, 0.5f, 0.0f);
    } else {
        drawPolygon(originalPolygon, 0.2f, 0.6f, 1.0f);
    }
    
    // Draw viewport divider
    glViewport(0, 0, windowWidth, windowHeight);
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    gluOrtho2D(0, windowWidth, 0, windowHeight);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_LINES);
    glVertex2i(windowWidth / 2, 0);
    glVertex2i(windowWidth / 2, windowHeight);
    glEnd();
    
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
    
    // Add labels
    glRasterPos2i(10, windowHeight - 20);
    const char* originalLabel = "Original Polygon";
    for (const char* c = originalLabel; *c != '\0'; c++) {
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, *c);
    }
    
    glRasterPos2i(windowWidth / 2 + 10, windowHeight - 20);
    const char* clippedLabel = "Clipped Polygon";
    for (const char* c = clippedLabel; *c != '\0'; c++) {
        glutBitmapCharacter(GLUT_BITMAP_9_BY_15, *c);
    }
    
    glutSwapBuffers();
}

// Reshape callback function
void reshape(int w, int h) {
    windowWidth = w;
    windowHeight = h;
    
    // Update viewports
    leftViewport = Viewport(0, 0, windowWidth / 2, windowHeight);
    rightViewport = Viewport(windowWidth / 2, 0, windowWidth / 2, windowHeight);
    
    glViewport(0, 0, windowWidth, windowHeight);
}

// Mouse callback function
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        // Convert screen coordinates to world coordinates
        float worldX = 2.0f * ((float)x / windowWidth) - 1.0f;
        float worldY = 1.0f - 2.0f * ((float)y / windowHeight);
        
        // Add point to the polygon
        originalPolygon.push_back(Point(worldX, worldY));
        
        glutPostRedisplay();
    } else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {
        // Finalize the polygon
        if (originalPolygon.size() >= 3) {
            std::cout << "Polygon finalized with " << originalPolygon.size() << " vertices." << std::endl;
            glutPostRedisplay();
        } else {
            std::cout << "Need at least 3 vertices to form a polygon." << std::endl;
        }
    }
}

// Keyboard callback function
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 27:  // ESC key
            exit(0);
            break;
        case 'c':
        case 'C':
            clipPolygon = !clipPolygon;
            std::cout << "Clipping " << (clipPolygon ? "enabled" : "disabled") << std::endl;
            glutPostRedisplay();
            break;
        case 'r':
        case 'R':
            originalPolygon.clear();
            clippedPolygon.clear();
            std::cout << "Polygon reset." << std::endl;
            glutPostRedisplay();
            break;
        default:
            break;
    }
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(windowWidth, windowHeight);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Polygon Clipping Demo");
    
    init();
    
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);
    
    std::cout << "Controls:" << std::endl;
    std::cout << "  Left mouse button: Add a new polygon vertex" << std::endl;
    std::cout << "  Right mouse button: Finalize the polygon" << std::endl;
    std::cout << "  'c' key: Toggle clipping" << std::endl;
    std::cout << "  'r' key: Reset the polygon" << std::endl;
    std::cout << "  ESC: Exit the program" << std::endl;
    
    glutMainLoop();
    
    return 0;
}
