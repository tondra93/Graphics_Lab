#include <GL/glut.h>
#include <iostream>
#include <cmath>

// Window dimensions
const int WINDOW_WIDTH = 600;
const int WINDOW_HEIGHT = 600;

// Scale factor to make the line visible in the window
const int SCALE = 20;

// Function to plot a pixel at (x, y)
void plotPixel(int x, int y) {
    // Convert from Cartesian to screen coordinates
    int screenX = WINDOW_WIDTH / 2 + x * SCALE;
    int screenY = WINDOW_HEIGHT / 2 - y * SCALE;
    
    // Draw the pixel as a small square for better visibility
    glBegin(GL_POINTS);
    glVertex2i(screenX, screenY);
    glEnd();
}

// Round a floating point value to the nearest integer
int round(float n) {
    return static_cast<int>(n + 0.5);
}

// DDA line algorithm
void ddaLine(int x1, int y1, int x2, int y2) {
    // Calculate differences
    int dx = x2 - x1;
    int dy = y2 - y1;
    
    // Calculate steps required for generating pixels
    float steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    
    // Calculate increment in x and y for each step
    float xIncrement = dx / steps;
    float yIncrement = dy / steps;
    
    // Starting point
    float x = x1;
    float y = y1;
    
    // Plot the first point
    plotPixel(round(x), round(y));
    
    // Plot the remaining points
    for (int i = 0; i < steps; i++) {
        x += xIncrement;
        y += yIncrement;
        plotPixel(round(x), round(y));
    }
}

// Draw coordinate axes
void drawAxes() {
    glBegin(GL_LINES);
    
    // X-axis
    glColor3f(0.5, 0.5, 0.5);
    glVertex2i(0, WINDOW_HEIGHT / 2);
    glVertex2i(WINDOW_WIDTH, WINDOW_HEIGHT / 2);
    
    // Y-axis
    glVertex2i(WINDOW_WIDTH / 2, 0);
    glVertex2i(WINDOW_WIDTH / 2, WINDOW_HEIGHT);
    
    glEnd();
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw coordinate axes
    drawAxes();
    
    // Draw the line using DDA algorithm
    glColor3f(1.0, 0.0, 0.0);
    glPointSize(5.0);
    
    // Draw the line from P1(0, 13) to P2(-1, 6)
    ddaLine(0, 13, -1, 6);
    
    // Draw the endpoints with different colors
    glColor3f(0.0, 1.0, 0.0);
    glPointSize(7.0);
    plotPixel(0, 13);  // P1
    
    glColor3f(0.0, 0.0, 1.0);
    plotPixel(-1, 6);  // P2
    
    glutSwapBuffers();
}

// Initialize OpenGL settings
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT);
}

// Main function
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow("DDA Line Algorithm");
    
    // Initialize OpenGL settings
    init();
    
    // Register callbacks
    glutDisplayFunc(display);
    
    // Print the endpoints
    std::cout << "Drawing line from P1(0, 13) to P2(-1, 6) using DDA algorithm" << std::endl;
    std::cout << "Green point: P1(0, 13)" << std::endl;
    std::cout << "Blue point: P2(-1, 6)" << std::endl;
    
    // Enter the main loop
    glutMainLoop();
    
    return 0;
}